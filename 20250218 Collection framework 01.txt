								Java Full Stack Development
									  18-02-2025
								Mr.Akash(NSA IT-POINT)   
===================================================================================================
 
                                           
============================
Approach-1 : Primitive Data Type
============================

variables --> to store the data

data type --> type of data that we can store in variable

		1) primitive data types (byte, short, int, long, float, double, char, boolean)

		2) referenced data types (Array, String, Class etc..)


			int   a = 10;

			int   b = 20 ; 

			int   c = 30 ;

I want to store 1000 values ? ---- 1000 variables we need

I wan to store 1 lakh values ? ----> 1 lakh variables ---> Not recommended

-> To overcome this problem we are using Arrays concept in java



==================
Approach-2 : Arrays
==================

-> We can store group of values in single variable

			int [ ]  a  = new int [ 5000 ] ;

			arr[0] = 100;
			arr[1] = 200;
			arr[2] = 300;
				....
			arr[4999] = 7799;

----------------
Limitations
-----------------

1) Array are fixed in size, once it is created we cannot change its size based on requirements.

2) We can store only homogenious values (same type of values)


Student s [ ]  = new Student [ 100 ];

s[ 0 ] = new Student(10, "Raju");  // valid

s[1] = new Student(11, "Rani");  // valid

s[2] = new Employee(101, "Ramesh");  /// invalid
...
s[99] = new Student(999, "john"); // valid

======================
Approach-3 : Object Array
=======================

Object [ ]   a = new Object [ 100 ];

a[0] = new Student(101, "Raju");
a[1] = new Student(102, "Rani");

a[2] = new Employee(101, "Raju", 1000.00);
a[3] = new Employee(102, "Rani", 2000.00);

a[2] = new Customer(101, "Raju", 1000.00);
a[3] = new Customer(102, "Rani", 2000.00);

limitations :

---> Size is fixed
---> insert, update, retrieve, sort the data


@@ To overcome the problems of Arrays we are going to use Collections

-> We can store any type of data in Collection
	(homegeneuous & heterogeneuous)

-> Collections are used to store group of objects / values

-> Collections are growable in nature
 (dynamically collection size can be increased and decreased based on data)

-> Collections providing predefined methods to insert,update, delete, retrieve, sort etc....

-> Collections is a entity / container which is used to store group of Objects


**Note : -> Array can hold both primitives data types and objects Whereas collection hold only objects not primitives data type.

Collections ----> Collections Framework

Framework means ready made software

Collections is called as framework because it is providing predefined interfaces, classes and methods to perform operations on data.


1) Why we need to for Collections ?

2) What is Collection Framework ?

3) Collection Hierarchy

----------
Collection : 
-----------

If we want to represent the group of objects as single entity then we should go for collection.

			
		1. Collection
		2. List
		3. Set
		4. SortedSet
		5. NavigableSet
		6. Queue
		7. Map
		8. SortedMap
		9. NavigableMap

***************
List Interface:  
***************
	1. It is child interface of collection. [Exetending properties from Collection interface]
	2. It is present in Java.util.Package.
	3. If we want to represent group of individual objects as single entity where "duplicates are allowed" and "insertion order is preserved" then we should go for list.
	4. We can differentiates by using index.
	5. We can preserve insertion order by using index. Hence index plays important role. It will get the same sequence of element while retrieving the elements.
	6.Supports null values 

add(E e), add(int index, E element) :	Adds an element at the end or at a specific index.
remove(int index), remove(Object o) :	Removes an element by index or value.
remove(Object o) :Integer.valueOf(10) -> for Integer list	 
get(int index)   :	Retrieves an element at a specified index.
set(int index, E element)	: Replaces the element at a given index.
indexOf(Object o), lastIndexOf(Object o)	:  Finds the first or last occurrence of an element.
contains(Object o)	: Checks if the list contains a specific element.
size()	: Returns the number of elements.
isEmpty()	: Checks if the list is empty.
clear()	: Removes all elements.
subList(int fromIndex, int toIndex) : 	Returns a portion of the list as another list.

PTR: {"duplicates are allowed" and "insertion order is preserved" }	

->  It has four subclasses in java 

			1) ArrayList
			2) LinkedList
			3) Vector
			4) Stack
			
		List l = new List ( );   // invalid

		List l = new ArrayList ( ) ; // valid

		List l = new LinkedList ( ) ;  // valid

========
ArrayList
========
-> Implementation class of List interface
-> Duplicate objects are allowed
-> Insertion order preserved
-> null values are accepted
-> Internal data structure of ArrayList is growable array
-> Default Capacity is 10
->Heterogenous objects are allowed.


ArrayList Growth Mechanism
-------------------------------------------------

ArrayList is implemented using a dynamic array, meaning its size increases automatically when it reaches capacity.

How Does ArrayList Grow?
-> Initial Capacity: Default 10 elements (if no capacity is specified).
-> When the array is full, a new array is created with increased capacity, and all elements are copied to the new array.
-> The new capacity is 1.5 times (50% increase) the old capacity. 
 
newCapacity = oldCapacity + (oldCapacity >> 1); [(Here, >> 1 is a right shift, which means dividing by 2.)]

10->15->22->33->49->73

This growth strategy balances memory efficiency and performance.
List<Integer> list = new ArrayList<>(100); // Avoids resizing overhead
Since resizing requires copying all elements into a new array, frequent additions can slow performance.
 ++++++++++++++++++++++++++++++++
=====================
ArrayList Constructors
=====================

1) ArrayList al = new ArrayList ( ) ; 

2) ArrayList al = new ArrayList (int capacity);
   -> Here we are passing the int type value

3) ArrayList al = new ArrayList (Collection c);
   -> Here we are passing the collections objects.
   
================================================
package com.nsa.list;

import java.util.ArrayList;
import java.util.List;

public class DemoArrayList01 {

	public static void main(String[] args) {

		// List list = new ArrayList<>();
		ArrayList al = new ArrayList();

		al.add(10);
        al.add(50.50);
        al.add("akash");
        al.add('M');
        al.add(true);

		System.out.println(al);

		for (Object obj : al) {
			System.out.println(obj);
		}
	}
}
================================================
package com.nsa.list;

import java.util.ArrayList;

public class DemoArrayList02 {

	public static void main(String[] args) {

		ArrayList<Integer> al = new ArrayList();

		al.add(10);
		al.add(20);
//		al.add("akash"); invalid
		al.add(50);
		al.add(100);

		System.out.println(al);

		for (int a : al) {
			System.out.println(a);
		}
	}
}
================================================
package com.nsa.list;

import java.util.ArrayList;

public class DemoArrayList03 {

	public static void main(String[] args) {
		
		ArrayList<String> al = new ArrayList<>();
		
		al.add("akash");
		al.add("vikas");
		al.add("prakash");
		al.add(null);
	//	al.add(10); invlaid
		
		System.out.println(al);
		
		for(String s : al) {
			System.out.println(s);
		}
	}
}
================================================
package com.nsa.list;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.ListIterator;

public class DemoArrayList04 {

	public static void main(String[] args) {

		ArrayList<Integer> al = new ArrayList<>();

		al.add(10); // 0th index
		al.add(20); // 1th index
		al.add(40); // 2th index
		al.add(30); // 3th index

		System.out.println(al.size());

		System.out.println("First Approach");
		System.out.println(al);

		System.out.println("2nd appraoch");
		for (int a = 0; a < al.size(); a++) {
			System.out.println(al.get(a));
		}

		System.out.println("3rd Approach");
		for (int i : al) {
			System.out.println(i);
		}

		System.out.println("4th appraoch");
		Iterator<Integer> itr = al.iterator();
		while (itr.hasNext()) {
			System.out.println(itr.next());
		}

		System.out.println("5th Approach : Forward Direction");
		ListIterator<Integer> listItr = al.listIterator();
		while (listItr.hasNext()) {
			System.out.println(listItr.next());
		}
		
		System.out.println("5th Approach :  Backward Direction");
		while (listItr.hasPrevious()) {
			System.out.println(listItr.previous());
		}

		System.out.println("6th Approach");
		al.forEach( x-> System.out.println(x));
		
	}
}
================================================
   