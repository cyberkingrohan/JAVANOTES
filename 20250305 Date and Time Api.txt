								Java Full Stack Development
									    05-03-2025
								   Mr.Akash(NSA IT-POINT)   
================================================================================================

=======================
Date & Time API Changes
=======================

-> In java we have below 2 classes to represent Date

			1) java.util.Date : [date and time] general-purpose date class

			2) java.sql.Date  :[only date] designed for JDBC operations


Note: When we are performing database operations then we will use java.sql.Date class.

-> For normal Date related operations we will use java.util.Date class

			Date d = new Date ( );
			System.out.prinln(d);

Note: When we create Object for Date class, it will represent both date and time.

-> If we want to get only date or only time then we need to format it using SimpleDateFormat class.

========================
java.text.SimpleDateFormat
=======================

-> SimpleDateFormat is a predefined class in java.text pacakage

-> This class provided methods to perform Date conversions


		Date to String conversion  ===>   String format (Date d) 

		String to Date conversion ===>  Date parse(String str)
		
=============================================
package com.nsa.dateapi;

import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.Date;

public class DateTest {
    public static void main(String[] args) {

        Date date = new Date();
        System.out.println(date); // Tue Mar 24 20:08:38 IST 2021

        SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy"); //04-03-2025
        String format = dateFormat.format(date);
        System.out.println(format);

        LocalDate localDate = LocalDate.now(); //2025-03-04
        System.out.println(localDate);

        LocalTime localTime = LocalTime.now(); //20:21:18.539188500
        System.out.println(localTime);

        LocalDateTime localDateTime = LocalDateTime.now(); //2025-03-04T20:21:18.540185100
        System.out.println(localDateTime);

    }
}


//You need to book a hotel room and calculate the duration of the stay.

LocalDate checkIn = LocalDate.of(2024, 3, 10);
LocalDate checkOut = LocalDate.of(2024, 3, 15);
long days = ChronoUnit.DAYS.between(checkIn, checkOut);
System.out.println("Total stay: " + days + " days"); // Output: 5 days

=====================================

A customer purchases a product on credit, and the payment is due after 30 days.

LocalDate purchaseDate = LocalDate.now();
LocalDate dueDate = purchaseDate.plusDays(30);
System.out.println("Payment due on: " + dueDate);

=====================================
Display a date in the format dd-MM-yyyy.

DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
String formattedDate = LocalDate.now().format(formatter);
System.out.println("Formatted Date: " + formattedDate);

=====================================
A flash sale ends in 5 hours, and you need to display the countdown.

LocalTime saleEnd = LocalTime.now().plusHours(5);
Duration remaining = Duration.between(LocalTime.now(), saleEnd);
System.out.println("Flash sale ends in: " + remaining.toHours() + " hours");
 
=====================================
Calculate an employee's age based on their birthdate.

LocalDate birthDate = LocalDate.of(1995, 5, 20);
int age = Period.between(birthDate, LocalDate.now()).getYears();
System.out.println("Employee's age: " + age);
 
=====================================
A subscription renews every month on the 15th.

LocalDate nextRenewal = LocalDate.of(2024, 3, 15).plusMonths(1);
System.out.println("Next renewal date: " + nextRenewal);

=====================================
//leap year

boolean leapYear = LocalDate.parse("2100-05-17").isLeapYear(); //yyyy-MM-dd
System.out.println(leapYear);

=======================================