								Java Full Stack Development
									  21-02-2025
								Mr.Akash(NSA IT-POINT)   
===================================================================================================

========
Cursors
========

-> Cursors are used to iterate collections (retreive data from collections)

1) Iterator
2) ListIterator
3) Enumeration


-> Collections framework related classes & interfaces are part of java.util package


=================
Collection interface
=================

-> It is super interface for List, Set and Queue

-> Collection interface providing several methods to store and retrieve objects



1) Iterator   ----> forward direction  ( List & Set )

2) ListIterator  ---> forward & backward direction ( List impl classes )

3) Enumeration   ----> forward direction & supports for legacy collection classes



======
Set
======

-> Set is a interface available in java.util package

-> Set interface extending from Collection interface

-> Set is used to store group of objects

-> Duplicate objects are not allowed

-> Supports Homogenious & hetero genious

===============================
Set interface Implementation classes
================================

1) HashSet

2) LinkedHashSet

3) TreeSet



=========
HashSet
=========

-> Implementation class of Set interface

-> Duplicate Objects are not allowed

-> Null is allowed

-> Insertion order will not be maintained

-> Initial Capacity is 16

-> Load Factor 0.75

-> Internal Datastructure is Hashtable


============
Constructors
===========

HashSet hs = new HashSet( );

HashSet hs = new HashSet(int capacity);

HashSet hs = new HashSet(int capacity, float loadFactor);


// Java Program on HashSet
=================================
package in.nsa.akash.workshop.set

public class Demo {

	public static void main(String[] args) {

		HashSet<String> hs = new HashSet<>(100, 10.05f);

		hs.add("one");
		hs.add("two");
		hs.add("three");
		hs.add("four");
		hs.add("one");
		hs.add(null);

		System.out.println(hs);
		hs.remove("three");
		System.out.println(hs);

		Iterator<String> iterator = hs.iterator();
		while (iterator.hasNext()) {
			System.out.println(iterator.next());
		}
	}
}

===========Duplicate Object=============
package com.nsa.set;

import java.util.Objects;

public class Student {

    Integer id;
    String name;
    String address;

    public Student(Integer id, String name, String address) {
        this.id = id;
        this.name = name;
        this.address = address;
    }

    @Override
    public String toString() {
        return "Student{" +
                "id=" + id +
                ", name='" + name + '\'' +
                ", address='" + address + '\'' +
                '}';
    }


}
------------------------------------------------------
package com.nsa.set;

import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

public class StudTest {


    //write a method to return set of student object

    public Set<Student> getStudents() {
        Set<Student> studSet = new HashSet<>();

        studSet.add(new Student(101, "akash", "mumbai"));
        studSet.add(new Student(102, "aman", "pune"));
        studSet.add(new Student(103, "vivek", "nagpur"));
        studSet.add(new Student(103, "vivek", "nagpur")); //duplicate object will get added

        return studSet;
    }


    public static void main(String[] args) {
        StudTest test = new StudTest();
        Set<Student> studSet = test.getStudents();

        Iterator<Student> itr = studSet.iterator();
        while (itr.hasNext()) {
            System.out.println(itr.next());
        }

    }
}

------------
add in student class for keeping only unique object on the basis of id and name
----------------------
    @Override
    public boolean equals(Object o) {
        if (o == null || getClass() != o.getClass()) return false;
        Student student = (Student) o;
        return Objects.equals(id, student.id) && Objects.equals(name, student.name);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, name);
    }
-------------------------------

===================

=================
LinkedHasSet
==================

-> Implementation class for Set interface

-> Duplicates are not allowed

-> Insertion order will be preserved

-> Internal Data Structure is Hash table + Double linked list

-> Initial capacity 16

-> Load Factory 0.75



public class Demo {

	public static void main(String[] args) {

		LinkedHashSet<Integer> lhs = new LinkedHashSet<>();
		lhs.add(10);
		lhs.add(20);
		lhs.add(30);
		lhs.add(null);
		lhs.add(40);
		lhs.add(20);

		System.out.println(lhs);
	}
}


Note:  HashSet will not maintain insertion order where as LinkedHashSet will maintain insertion order.
HashSet will follow Hastable data structure where as LinkedHashSet will follow Hashtable + Double Linked List data structure.


========
TreeSet
========

-> Implementation class for Set interface

-> It will maintain Natural Sorting Order

-> Duplicates are not allowed

-> null values are not allowed

Note: When we add null value it will try to compare null value with previous object then we will get NullPointerException.

-> It supports only homogeniuous data 

Note : TreeSet should perform sorting so always it will compare newly added object with old object. In order to compare the objects should be of same type other wise we will get ClassCastException.

-> Internal data structure is binary tree.



public class Demo {

	public static void main(String[] args) {

		TreeSet ts = new TreeSet();

		ts.add("raja");
		ts.add("raja");
		ts.add("rani");
		ts.add("akash");

		System.out.println(ts); // akash, raja, rani

		Iterator iterator = ts.iterator();
		while(iterator.hasNext()) {
			System.out.println(iterator.next());
		}
	}
}















List interface & implementation classes

			- duplicates allowed
			- insertion order maintained
			- homogenious & heterogenious data allowed

	Ex:  ArrayList, LinkedList, Vector & Stack

Set interface & implementation classes

			- Duplicates not allowed
			- only LHS will maintain insertion order
			- TreeSet supports only homogenious data (For sorting)

	Ex:  HashSet, LinkedHashSet & TreeSet



Cursors :  To traverse collection objects

1) Iterator
2) ListIterator
3) Enumeration



==========Remove Duplicate Element fromArrayList=============
package in.nsa.akash.workshop.set;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.TreeSet;

public class REmoveDuplicate {

	public static void main(String[] args) {

		ArrayList<Integer> al = new ArrayList<>();
		al.add(10);
		al.add(20);
		al.add(80);
		al.add(30);
		al.add(60);
		al.add(50);
		al.add(30);
		al.add(60);
		al.add(50);

		System.out.println(al);
		// [10, 20, 80, 30, 60, 50, 30, 60, 50]

		HashSet<Integer> hs = new HashSet<>(al);
		System.out.println(hs);
		// [80, 50, 20, 10, 60, 30]

		LinkedHashSet<Integer> lhs = new LinkedHashSet<>(al);
		System.out.println(lhs);
		// [10, 20, 80, 30, 60, 50]
		
		TreeSet<Integer> ts = new TreeSet<>(al);
		System.out.println(ts);
		//[10, 20, 30, 50, 60, 80]

	}
}
=================