								Java Full Stack Development
									    22-02-2025
								   Mr.Akash(NSA IT-POINT)   
================================================================================================

=======
Queue
=======

-> It is extending properties from Collection interface

-> It is used to store group of objects

-> Internal Data structure is FIFO (First in First out)

-> It is ordered list of objects

-> insertion will happen at end of the collection

-> Removal will happen at beginning of the collection

Queue is an interface that represents a collection designed for holding elements prior to processing. 
It follows the First-In-First-Out (FIFO) principle, meaning the element that was added first is the first one to be removed. 
PriorityQueue is a class that implements the Queue interface and provides a priority-based ordering of elements.

Key Methods in the Queue Interface
add(E e): Adds an element to the queue. Throws an exception if the queue is full.

offer(E e): Adds an element to the queue. Returns false if the queue is full.

remove(): Removes and returns the head of the queue. Throws an exception if the queue is empty.

poll(): Removes and returns the head of the queue. Returns null if the queue is empty.

element(): Retrieves, but does not remove, the head of the queue. Throws an exception if the queue is empty.

peek(): Retrieves, but does not remove, the head of the queue. Returns null if the queue is empty.


Queue is usually implemented by classes like LinkedList, ArrayDeque, and PriorityQueue

Difference between add(Object o) and offer(Object o) is when capacity if full add through exception and offer return false;

Example 1: Using LinkedList as a Queue
import java.util.LinkedList;
import java.util.Queue;

public class QueueExample {
    public static void main(String[] args) {
        // Create a Queue using LinkedList
        Queue<String> queue = new LinkedList<>();

        // Add elements to the queue
        queue.add("Apple");
        queue.offer("Banana");
        queue.add("Cherry");

        // Print the queue
        System.out.println("Queue: " + queue); // Output: Queue: [Apple, Banana, Cherry]

        // Remove and return the head of the queue
        String head = queue.poll();
        System.out.println("Removed element: " + head); // Output: Removed element: Apple

        // Peek at the head of the queue
        String peekedElement = queue.peek();
        System.out.println("Peeked element: " + peekedElement); // Output: Peeked element: Banana

        // Print the queue after operations
        System.out.println("Queue after operations: " + queue); // Output: Queue after operations: [Banana, Cherry]
    }
}
Example 2: Using PriorityQueue
A PriorityQueue orders elements according to their natural ordering or a custom comparator.

java
Copy
import java.util.PriorityQueue;
import java.util.Queue;

public class PriorityQueueExample {
    public static void main(String[] args) {
        // Create a PriorityQueue
        Queue<Integer> priorityQueue = new PriorityQueue<>();

        // Add elements to the priority queue
        priorityQueue.offer(30);
        priorityQueue.offer(10);
        priorityQueue.offer(20);

        // Print the priority queue (order may not be as expected due to heap structure)
        System.out.println("PriorityQueue: " + priorityQueue); // Output: PriorityQueue: [10, 30, 20]

        // Remove and return the head of the priority queue
        while (!priorityQueue.isEmpty()) {
            System.out.println("Removed element: " + priorityQueue.poll());
        }
        // Output:
        // Removed element: 10
        // Removed element: 20
        // Removed element: 30
    }
}
Example 3: Using ArrayDeque
An ArrayDeque is a resizable array implementation of the Deque interface, which can be used as a queue.

java
Copy
import java.util.ArrayDeque;
import java.util.Queue;

public class ArrayDequeExample {
    public static void main(String[] args) {
        // Create an ArrayDeque
        Queue<String> arrayDeque = new ArrayDeque<>();

        // Add elements to the ArrayDeque
        arrayDeque.offer("Dog");
        arrayDeque.offer("Cat");
        arrayDeque.offer("Bird");

        // Print the ArrayDeque
        System.out.println("ArrayDeque: " + arrayDeque); // Output: ArrayDeque: [Dog, Cat, Bird]

        // Remove and return the head of the ArrayDeque
        String removedElement = arrayDeque.poll();
        System.out.println("Removed element: " + removedElement); // Output: Removed element: Dog

        // Peek at the head of the ArrayDeque
        String peekedElement = arrayDeque.peek();
        System.out.println("Peeked element: " + peekedElement); // Output: Peeked element: Cat

        // Print the ArrayDeque after operations
        System.out.println("ArrayDeque after operations: " + arrayDeque); // Output: ArrayDeque after operations: [Cat, Bird]
    }
}

========poll vs remove()==================

In Java's Queue interface, both the remove() and poll() methods are used to remove and retrieve the head (front) element from the queue. However, there is a difference in their behavior when the queue is empty.

1. remove() Method:
   - remove() method is used to retrieve and remove the head of the queue.
   - If the queue is empty, remove() throws a NoSuchElementException.

   java
   E remove();
   

2. poll() Method:
   - poll() method is used to retrieve and remove the head of the queue.
   - If the queue is empty, poll() returns null.

   java
   E poll();
   

Here's a brief example illustrating the difference:

import java.util.LinkedList;
import java.util.Queue;

public class QueueExample {
    public static void main(String[] args) {
        Queue<String> queue = new LinkedList<>();

        // Queue is empty
        System.out.println(queue.remove()); // Throws NoSuchElementException
        System.out.println(queue.poll());   // Returns null

        queue.offer("A");
        queue.offer("B");
        queue.offer("C");

        System.out.println(queue.remove()); // A
        System.out.println(queue.poll());   // B
        System.out.println(queue.poll());   // C
        System.out.println(queue.poll());   // Returns null as the queue is empty
    }
}


In summary:
- Use remove() when you expect the queue to have elements, and you want an exception (NoSuchElementException) to be thrown if the queue is empty.
- Use poll() when you want to retrieve and remove an element from the queue, and you want to handle the case where the queue is empty by getting a null instead of an exception.

=======================add vs offer method================

In Java's Queue interface, both the add() and offer() methods are used to add an element to the queue. However, there is a difference in their behavior when the queue is full (in the case of a bounded queue).

1. add(E e) Method:
   - add() method is used to add an element to the queue.
   - If the queue is full (in the case of a bounded queue), add() throws an IllegalStateException.

   java
   boolean add(E e);
   

2. offer(E e) Method:
   - offer() method is used to add an element to the queue.
   - If the queue is full (in the case of a bounded queue), offer() returns false without throwing an exception.

   java
   boolean offer(E e);
   

Here's a brief example illustrating the difference:

java
import java.util.LinkedList;
import java.util.Queue;

public class QueueExample {
    public static void main(String[] args) {
        Queue<String> queue = new LinkedList<>();

        // Queue is unbounded, so add() and offer() behave the same
        System.out.println(queue.add("A")); // true
        System.out.println(queue.offer("B")); // true

        // Bounded queue with a capacity of 1
        Queue<String> boundedQueue = new LinkedList<>();
        boundedQueue.add("A"); // Adds successfully
        System.out.println(boundedQueue.add("B")); // Throws IllegalStateException

        Queue<String> anotherBoundedQueue = new LinkedList<>();
        anotherBoundedQueue.offer("X"); // Adds successfully
        System.out.println(anotherBoundedQueue.offer("Y")); // Returns false
    }
}


In summary:
- Use add() when you want to add an element to the queue, and you expect the operation to succeed (e.g., in an unbounded queue or when you know the queue has available space).
- Use offer() when you want to add an element to the queue, and you want to handle the case where the queue is full by getting a false return value instead of an exception (useful for bounded queues).

===============================XXXX=========================

