							Java Full Stack Development
									10-04-2025
							   Mr.Akash(NSA IT-POINT) 							   
===============================================================================

================================================================
****************************************************************
		Spring Bean Scope
****************************************************************
================================================================
Scope :- It indicates variable/object access limits/life time.

In Core Java:
=> Local Scope  [Block Scope]
=> Instance/Object Scope [Object creation to destroy]
=> Static Scope [clas loading to unloading]

In Spring :
1. singleton (default scope/longestq)
	One Object is created by Spring container per configuration
	 1 <bean> = 1 object = 1 @Bean = 1 @Component
Ex:
  <bean id="a1" class="A" ..
  <bean id="a2" class="A" ..

2. prototype : Creates new object on every access.
3. request (WEB APP) : Create one new object when request comes to server
4. session (WEB APP) : Creates one new object when session is created/login sucess.

Q) Are singleton scope and singleton class same?
A) No.
   singleton class is a design pattern that allows 
   only one object for one class

   singleton scope is designed for Spring F/w only.
   container creates one object for 1 configuration.

Q) Which one is the default scope in Spring f/w?
A) singleton is the default.

==========Code Samples=================================
1. XML Config
<bean id="" class=""  scope="____" >
</bean>

2. Java Config
//  1 method = 1 object
 @Bean
 @Scope("__________")
 public <className> <objName>() {  ... return .... }

3. Annotation Config
 @Component
 @Scope("_____")
 class ______{ }
 
Note : Scope names are reserved words and they are case-sensitive
   singleton, prototype, request, session
For one Bean Configuration , scope must be given only once. 
================================================================
			============================================================
	Spring Bean Scope Annotation Config
*************************************************************
1. Spring Bean
package org.beanscope;

import java.util.Random;

import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

@Component("t1")
//@Scope("singleton")
@Scope("prototype")
public class Token {

	private int code;

	public Token() {
		super();
		code = Math.abs( new Random().nextInt() );
	}

	@Override
	public String toString() {
		return "Token [code=" + code + "]";
	}
}

2. Spring Config class
package org.beanscope;

import org.springframework.context.annotation.ComponentScan;

@ComponentScan("org.beanscope")
public class AppConfig {

}

3. Test class
package org.beanscope;

import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class Test {

	public static void main(String[] args) {
		ApplicationContext ac = new AnnotationConfigApplicationContext(AppConfig.class);
 		Token ta1  = ac.getBean("t1",Token.class);
		System.out.println(ta1);
		Token ta2  = ac.getBean("t1",Token.class);
		System.out.println(ta2);
	}
}
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
	Spring bean -- Java Config Example
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
1. Spring Bean
package org.beanscope;

import java.util.Random;

//@Component("t1")
//@Scope("singleton")
//@Scope("prototype")
public class Token {

	private int code;

	public Token() {
		super();
		code = Math.abs( new Random().nextInt() );
	}

	@Override
	public String toString() {
		return "Token [code=" + code + "]";
	}
	
	
	
}

2. Spring Config class
package org.beanscope;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;

//@ComponentScan("org.beanscope")
@Configuration
public class AppConfig {

	//1. Bean = 1 Method
	@Bean
	@Scope("prototype")
	public Token t1() {
		return new Token();
	}
	
}

3. Test class
package org.beanscope;

import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class Test {

	public static void main(String[] args) {
		ApplicationContext ac = new AnnotationConfigApplicationContext(AppConfig.class);
		Token ta1  = ac.getBean("t1",Token.class);
		System.out.println(ta1);
		Token ta2  = ac.getBean("t1",Token.class);
		System.out.println(ta2);
	}
}
================================================================
*************************FAQs*********************************
1. What is the default scope in Spring F/w?
A. singleton

2. Is Spring container EAGER/LAZY by default in Bean Creation?
A. If the scope is set to singleton then such beans are created
   while creating spring container (ie EAGER LOADING)

   If the scope is set to prototype then such beans are created
   after creating spring container, when we try to read object
   from container (getBean) (ie LAZY LOADING).

3. How can we force container to behave Lazy for singleton beans?
A. We need to add one annotation @Lazy over Bean Config.

ex:
@Component("t1")
@Lazy
public class Token { ... }

ex:
<bean id="" class="" scope="" lazy-init="true" > </bean>

4. When should we go for singleton / prototype?
A. Based on requirement.
  If we want one object for a config , then use singletion
   else go for prototype
Ex:
  DatabaseCon -- 1 object is fine so goto singleton
  OTP         -- need different object every time -- prototype

5. When should we go for Lazy?
A. LAZY creates object on first access (for singleton)
   To avoid all objects creation while container creation
   ( a type of memory saving )
   but finally object is created (on first access)
Gmail ---Ex
 InboxService (EAGER/singleton)
 DraftService (LAZY/Singleton)

6. How can we convert prototype Loading to EAGER?
A. No. We can not convert Prototype object scope (or)
   LAZY Loading to EAGER.
   No Such annotation like EAGER.

7.*** What is load-on-startup in Servlets?
   (or) Explain Eager and Lazy Loading in Servlets?
	

8. How can we provide two scopes for a same bean?
A. We can never provide multiple scopes for a single/same bean.

9. Is Below code valid? how many objects created?
 (Using Both Java and Annotation Config at a time)

@Component("oa")
public class A{ 
  @Value(20)
  int code;
}
-------------
@Configuration
public class AppConfig {
  @Bean
  public A oa() {
    A a1 = new A();
    a1.setCode(10);
    return a1;
  }
}

A. __________________________________

10. Also try above code with Scopes (singleton/prototype)...
11. Also use Loadings in different way.
-------------------------------------------------------------------