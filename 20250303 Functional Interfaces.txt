								Java Full Stack Development
									    03-03-2025
								   Mr.Akash(NSA IT-POINT)   
================================================================================================

==================
Functional Interfaces
==================

-> The interface which contains only one abstract method is called as Functional Interface

-> Functional Interfaces are used to invoke Lambda expressions

-> Below are some predefined functional interfaces

			Runnable ------------> run ( ) method

			Callable ----------> call ( ) method

			Comparable -------> compareTo ( )

-> To represent one interface as Functional Interface we will use @FunctionalInterface annotation.


@FunctionalInterface
public interface MyInterface {
	public void m1( );
}

Note: When we write @FunctionalInterface then our compiler will check interface contains only one abstract method or not.


-> In Java 8 several predefined Functional interfaces got introduced they are

	1) Predicate<T>    		: boolean test(T t)
	2) BiPredicate<T, U>	: boolean test(T t, U u)
	3) Consumer<T> 			: void accept(T t)
	4) BiConsumer<T, U>		: void accept(T t, U u)
	5) Supplier<T>			: T get()
	6) Function<T, R> 		: R apply(T t)
	7) BiFunction<T, U, R>	: R apply(T t, U u)
    8) UnaryOperator<T>		: T apply(T t)
	9) BinaryOperator<T>	: T apply(T t1, T t2)
	10) ToIntFunction<T>   	: int applyAsInt(T value)
	


-> The above interfaces are provided in java.util.function package


========
Predicate
========

-> It is predefined Functional interface

-> It is used check condition and returns true or false value

-> Predicate interface having only one abstract method that is test (T t)


			interface Predicate{
				boolean test(T t);
			}		


// Predicate Example
   //check if the no is greater than 25
   
package com.nsa.functionainterface;

import java.util.function.Predicate;

public class ExPredicate {

	public static void main(String[] args) {

//		Predicate<Integer> p = (t) -> {
//			return t > 25;
//		};
		Predicate<Integer> p = (t) -> t > 25;

		System.out.println(p.test(10));
		System.out.println(p.test(30));
		System.out.println(p.test(20));

	}
}
==========================

package com.nsa.functionainterface;

import java.util.function.Predicate;

public class ExPred {
	public static void main(String[] args) {

		//check if name starts with "A"
		Predicate<String> p = (name) -> name.startsWith("A");
		System.out.println(p.test("Akash"));
		System.out.println(p.test("Vikash"));
		System.out.println(p.test("akash"));

		//check if no of letter in name is more than 4
		Predicate<String> pd = (name) -> name.length() > 4;
		System.out.println(pd.test("Akash"));
		System.out.println(pd.test("Vikash"));
		System.out.println(pd.test("Golu"));

	}
}

=======================================================================================
Task: Declare names in an array and print names which are starting with 'A' using lambda expression.

		String[] names = { "Akash", "Ajay", "Viru", "Jerry", "Chintu", "Aman" };

=========================================================================================
package com.java8.nsa.byAkash.functionalInterfaces;

import java.util.function.Predicate;

//print the names starting with A

public class PredicatrePrintName {

	public static void main(String[] args) {

		String[] names = { "Akash", "Ajay", "Viru", "Jerry", "Chintu", "Aman" };

		Predicate<String> p = (name) -> name.charAt(0) == 'A';

		// System.out.println(p.test("kash"));

		for (String s : names) {

			if (p.test(s)) {
				System.out.println(s);
			}
		}
	}
}
====================XXX==================
package com.nsa.functionainterface;

import java.util.function.Predicate;

public class ExPredicateEx {

	public static void main(String[] args) {

//		print the names having more than 4 lettter

		String[] names = { "Akash", "Vikash", "Prakash", "Golu", "Molu" };

		Predicate<String> p = (name) -> name.length() > 4;

		for (String str : names) {

			if (p.test(str)) {

				System.out.println(str);
			}

		}
	}
}
================
Predicate Joining
===============

-> To combine multiple predicates we will use Predicate Joining

and ( ) method

or ( ) method

		Predicate<String> p = pred1.and(pred2);
		Predicate<String> p = pred1.or(pred2);
========================  
====================
Supplier Functional Interface
==========================

-> Supplier is a predefined functional interface introduced in java 1.8v

-> It contains only one abstract method that is get ( ) method

-> Supplier interface will not take any input, it will only returns the value.

Ex:
----

OTP Generation
------------------------
package com.java8.nsa.byAkash.java8;

import java.time.LocalDate;
import java.util.function.Supplier;

public class Test {

	public static void main(String[] args) {
		// This function returns a random value.
		Supplier<Double> randomValue = () -> Math.random();

		// Print the random value using get()
		System.out.println(randomValue.get() * 10);

		Supplier<LocalDate> date = () -> LocalDate.now();
		System.out.println(date.get());

	}
}
-----------------
package com.java8.nsa.byAkash.java8;

import java.util.function.Supplier;

public class SupplierDemo {

	public static void main(String[] args) {

		Supplier<String> s = () -> {
			String otp = "";
			for (int i = 1; i <= 6; i++) {
				otp = otp + (int) (Math.random() * 10);
			}
			return otp;
		};

		System.out.println(s.get());
		System.out.println(s.get());
		System.out.println(s.get());
		System.out.println(s.get());
		System.out.println(s.get());
		System.out.println(s.get());
	}
}

=================================
==========================
Consumer Functional Interface
==========================

-> Consumer is predefined functional interface

-> It contains one abstract method i.e accept (T t)

-> Consumer will accept input but it won't return anything

Note: in java 8 forEach ( ) method got introduced. forEach(Consumer consumer) method will take Consumer as parameter.


package com.nsa.functionainterface;

import java.util.ArrayList;
import java.util.List;
import java.util.function.Consumer;

public class ExComsumer {

	public static void main(String[] args) {

		Consumer<Integer> con = p -> System.out.println(p + " times Good Morning");
		con.accept(5);

		List<String> list = new ArrayList();
		list.add("abc");
		list.add("xyz");
		list.add("poqr");
		list.add("lmn");

		Consumer<String> con = (name) -> System.out.println(name);

		list.forEach(con);
		list.forEach((name) -> System.out.println(name));

		List<Integer> listInt = new ArrayList();
		listInt.add(10);
		listInt.add(20);
		listInt.add(30);
		listInt.add(40);

		listInt.forEach(x -> {
			int o = 0;
			o = x + 100;

			System.out.println(o);

		});

		// ==========================BiConsumer============================//
		
		BiConsumer<String, String> bc = (first, last) -> System.out.println(first + last);

		bc.accept("nsa", " it-point");
	}
}


=========================================================
Retrieve student record based on student id and return that record
=========================================================


Predicate ------> takes inputs ----> returns true or false    ===>    test ( )

Supplier -----> will not take any input---> returns output  ===> get ( )

Consumer ----> will take input ----> will not return anything  ===> accept ( )

Function -----> will take input ---> will return output ===> apply ( )


=========================
Function Functional Interface
=========================

-> Function is predefined functional interface

-> Funcation interface having one abstract method i.e apply(T r)

		interface Function<R,T>{
			R apply (T t);
		}	

-> It takes input and it returns output



package com.nsa.functionaInterface.function;

import java.util.function.BiFunction;
import java.util.function.BinaryOperator;
import java.util.function.Function;
import java.util.function.ToIntFunction;
import java.util.function.UnaryOperator;

public class ExampeFunction {

	// name : length
	public static void main(String[] args) {

		Function<String, Integer> fun = (name) -> name.length();
		Integer apply = fun.apply("nsaitpoint");
		System.out.println(apply);

		BiFunction<String, String, Integer> fun2 = (first, last) -> first.length() + last.length();
		Integer apply2 = fun2.apply("nsa", "it");
		System.out.println(apply2);

		UnaryOperator<String> un = (name) -> name;
		String apply3 = un.apply("nsaitpoint");
		System.out.println(apply3);

		BinaryOperator<Integer> bo = (x, y) -> {
			x = x + y;
			return (x + y);
		};
		Integer apply4 = bo.apply(10, 20);
		System.out.println(apply4);

		ToIntFunction<String> tf = (name) -> name.length();
		int applyAsInt = tf.applyAsInt("nsa");
		System.out.println(applyAsInt);

	}
}

=========================================================
Task : Take 2 inputs and perform sum of two inputs and return ouput
=========================================================


BiFunction<Integer,Integer,Integer> bif = (a,b) -> a+b;

Integer sum = bi.apply(10,20);


==========================
forEach (Consumer c) method
===========================

-> forEach (Consumer c) method introduced in java 1.8v

-> forEach ( ) method added in Iterable interface

-> forEach ( ) method is a default method (it is having body)

-> This is method is used to access each element of the collection (traverse collection from start to end)


package com.java8.nsa.byAkash.java8;

import java.util.ArrayList;

public class NumbersSort1 {

	public static void main(String[] args) {

		ArrayList<Integer> al = new ArrayList<>();
		al.add(5);
		al.add(3);
		al.add(4);
		al.add(1);
		al.add(2);

		al.forEach(i -> System.out.println(i));
	}
}

==========================
Problem 1: UnaryOperator<T>
Task:
Write a method that takes an integer and returns its square using UnaryOperator<Integer>.

Solution:


import java.util.function.UnaryOperator;

public class UnaryOperatorBasicExample {
    public static void main(String[] args) {
        // Define a UnaryOperator that squares an integer
        UnaryOperator<Integer> squareOperator = x -> x * x;

        // Apply the operator to an integer
        int result = squareOperator.apply(5);

        // Print the result
        System.out.println("Square of 5 is: " + result); // Output: Square of 5 is: 25
    }
}

Problem 2: BinaryOperator<T>
Task:
Write a method that takes two integers and returns their sum using BinaryOperator<Integer>.

Solution:


import java.util.function.BinaryOperator;

public class BinaryOperatorBasicExample {
    public static void main(String[] args) {
        // Define a BinaryOperator that adds two integers
        BinaryOperator<Integer> sumOperator = (x, y) -> x + y;

        // Apply the operator to two integers
        int result = sumOperator.apply(5, 10);

        // Print the result
        System.out.println("Sum of 5 and 10 is: " + result); // Output: Sum of 5 and 10 is: 15
    }
}

Problem 3: ToIntFunction<T>
Task:
Write a method that takes a string representing an integer and returns its integer value using ToIntFunction<String>.

Solution:


import java.util.function.ToIntFunction;

public class ToIntFunctionBasicExample {
    public static void main(String[] args) {
        // Define a ToIntFunction that converts a string to an integer
        ToIntFunction<String> toIntFunction = Integer::parseInt;

        // Apply the function to a string
        int result = toIntFunction.applyAsInt("123");

        // Print the result
        System.out.println("Integer value of '123' is: " + result); // Output: Integer value of '123' is: 123
    }
}

==============================
Summary
UnaryOperator<T>: Used to perform an operation on a single operand of type T, returning a result of the same type T.
BinaryOperator<T>: Used to perform an operation on two operands of type T, returning a result of the same type T.
ToIntFunction<T>: Used to convert an object of type T to a primitive int.

==========================
