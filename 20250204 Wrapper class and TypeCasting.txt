								Java Full Stack Development
									  04-02-2025
								Mr.Akash(NSA IT-POINT)   
===================================================================================================

===============
Wrapper Classes
===============
-> Java is a Object Oriented Programming Language

-> In java we can represent everything in the form of Object 

-> To represent primitive types data in object format java provided Wrapper classes

-> For every primitive type corresponding Wrapper class is available

-> All wrapper classes are part of java.lang package

-> All wrapper classes are final and immutable.


byte  ----> Byte

short  ---> Short

int  --->   Integer

long  ---> Long

float   ----> Float

double   ---->Double

char    ---> Character

boolean   ---> Boolean

Why we need Wrapper Class :

->Wrapper Class will convert primitive data types into objects. The objects are necessary if we wish to modify the arguments passed into the method (because primitive types are passed by value).
->The classes in java.util package handles only objects and hence wrapper classes help in this case also.
-?Data structures in the Collection framework such as ArrayList and Vector store only the objects (reference types) and not the primitive types.
->The object is needed to support synchronization in multithreading.
-?To Provide Utility Methods ->
	Wrapper classes provide useful static methods for converting, parsing, and manipulating values.

Example: Integer.parseInt(String s) converts a string to an int.

Example: Character.isDigit(char c) checks if a character is a digit.

-> To Support Database Operations
	[int store 0, Integer store null]



===========================
What is Boxing & Un-Boxing?
===========================

-> The process of converting primitive data type into Wrapper Object is called as Boxing.

-> The process of converting Wrapper object into primitive type is called as Un-Boxing.

-> From Java 1.5, boxing and unboxing process automated hence they are called as Auto Boxing & Auto UnBoxing.


public class Calculator {

	public static void main(String... args) {

		byte b = 20;
		System.out.println(b);

		Byte b1 = new Byte(b);  // Auto-boxing
		System.out.println(b1);

		byte b2 = b1; // Auto-un-boxing
		System.out.println(b2);
		
		
		int num = 250;
        byte b =(byte)num;   //data loss as byte can store upto 127
        System.out.println(b);
	}
}


Integer   i1 = new Integer ( 10 ) ;
Integer   i2 = new Integer ( "20" ); //depricated since 9v
		
Integer i = Integer.valueOf("10");
int i1 = Integer.parseInt("10");

Double  d1  = new Double ( 10.05 );
Double  d2 =  new Double ( "20.10" ); //depricated since 9v

Character c1 = new Character ('a');
Character c1 = new Character ("a");   // invalid

Each wrapper class provides utility methods for converting, parsing, and comparing values. 
Examples:
Integer.parseInt(String s): Converts a string to an int.
Integer.valueOf(String s): Converts a string to an Integerobject.
Integer.compare(int x, int y): Compares two int values.
Character.isDigit(char c): Checks if a character is a digit.
Boolean.valueOf(String s): Converts a string to a Boolean object.

Integer num = new Integer(“10”);  //Deprecated since 9v

===========
Type Casting
===========

-> Converting data from one data type to another data type is called as Type casting.

-> Type Casting is divided into 2 types

		1) Widening  / Up Casting

		2) Narrowing / Down Casting


-> The process of converting data from lower data type to higher data type is called as Widening.
-> As we are converting lower data type to higher data type there is no data loss 
-> For widenining no need to speciy type casting explicitley (JVM will take care of that)

				byte  b = 20 ;
				int i = b ; // widening


-> The process of converting data from higher data type to lower data type is called as Narrowing
-> As we are converting higher data type to lower data type there is a chance of data loss
-> For narrowing we need to specify type casting manually otherwise program can't be compiled

				long  num = 100 ;

				int  i = num ;  // compile time error

				int x = ( int ) num ; // narrowing

=======================
Working with String type
=======================

-> String type data can be converted to Integer using Integer.parseInt (xx) method.

-> parseInt (xx) is a static method available in Integer wrapper class.

public class Calculator {

	public static void main(String[ ] args) {

		String s1 = "10" ;
		String s2 = "20";

		int i = Integer.parseInt ( s1 ) ;
		int j = Integer.parseInt ( s2 );

		
		System.out.println ( i + j );   // 30

	}
}


---------------------------------------------------

String s1 = "10.56" ;

double d = Double.parseDouble (s1);

--------------------------------------------------

String s1 = "hi" ;
int i = Integer.parseInt ( s1 ) ;  // NumberFormatException

----------------------------------------------------------
		

// converting int data to String data

public class Calculator {

	public static void main(String[] args) {

		int i = 10;
		int j = 20;

		String s1 = String.valueOf(i);
		String s2 = String.valueOf(j);

		System.out.println(s1 + s2); // 1020

	}
}

----------------------------------------------------------------------
Type casting w.r.t to Reference Types
---------------------------------------------------------------------

public class Demo implements Cloneable {

	public static void main(String[] args) throws Exception {

		// child object
		Demo d = new Demo();

		// storing child obj into parent class reference variable
		Object obj = d; // widening / up casting   ( low to high )

		// cloning - getting parent object
		Object object = d.clone();

		// Storing parent object into child class reference variable
		Demo d1 = (Demo) object; // narrowing  ( high to low )

	}
}

===============================================
===============================================

1) Write a Java program to demonstrate Auto-boxing and Auto-unboxing with different data types.
2) Implement a program to check if a given character is a digit using Character.isDigit(char c).
3) Write a program that converts a String containing a numeric value to its respective int, double, and boolean values.
4) Convert an integer to a string and concatenate it with another string to verify its conversion.
5) Demonstrate the difference between Integer.parseInt() and Integer.valueOf() with an example.
6) Write a Java program that reads a number as a String, parses it into an Integer, adds 10 to it, and then converts it back to a String.
7) Implement a program to perform both widening and narrowing conversions with all primitive data types.
8) Create a program where an ArrayList stores integers and demonstrates the role of wrapper classes in collections.
9) Implement a method that takes a String input and checks whether it contains only numeric values (without using regex).
10) Write a Java program to convert double to String and String to double using wrapper classes.
===============================================
===============================================
		Practice Questions 
===============================================
===============================================	
What are wrapper classes in Java? Why do we need them?
Explain the difference between primitive data types and wrapper classes.
List all the wrapper classes in Java and their corresponding primitive data types.
What are the key characteristics of wrapper classes?
Explain Auto-boxing and Auto-unboxing with an example.
Why are wrapper classes immutable in Java?
What is type casting? Explain the difference between widening and narrowing with examples.
Why do we need type casting in Java?
What will happen if we try to perform narrowing without explicit type casting? Explain with an example.
Explain the difference between Integer.parseInt(String s) and Integer.valueOf(String s).
What is the purpose of Character.isDigit(char c) and Boolean.valueOf(String s) methods?
How does type casting work with reference types? Explain with an example.
Explain why Integer num = new Integer(“10”); is deprecated in Java 9 and what alternative should be used.
What is the significance of String.valueOf(int i)? How does it differ from Integer.toString(int i)?
What will happen if we try to convert a non-numeric string into an integer using Integer.parseInt()? Provide an example.

=============================================
=============================================
1. What are wrapper classes in Java? Why do we need them?
Wrapper classes in Java are used to represent primitive data types as objects. Java provides a wrapper class for each primitive type, allowing them to be used in object-oriented contexts, such as collections (e.g., ArrayList), synchronization, and serialization.

Why do we need them?
Java collections (like ArrayList) store objects, not primitive data types.
Wrapper classes provide utility methods for converting values (e.g., Integer.parseInt()).
They allow null values, unlike primitive types.
They support features like auto-boxing and auto-unboxing.
================================================
2)Difference between primitive data types and wrapper classes

Feature		|Primitive Data Types			|Wrapper Classes
Storage		|Stored directly in memory 		|Stored as objects (heap)
Memory		|Efficiency	More efficient	    |Less efficient (overhead of object creation)
Object-		
Oriented 
Support		|Cannot be used in collections  |Can be used in collections
Methods		|No utility methods availabe    |Provides utility methods (parseInt(), valueOf(), etc.)
Nullability	|Cannot be null	                |Can be null
Example		|int a = 10;	                |Integer a = new Integer(10);
=============================================================
->Why are wrapper classes immutable in Java?
Security: Prevents accidental modification of values.
Caching: Objects can be reused from cache for better performance.
Consistency: Strings in Java are immutable, and immutable wrapper classes maintain consistency when working with collections.
===========================================================
->Why do we need type casting in Java?
Memory Optimization: Converting double to int reduces memory usage.
Interoperability: Needed when calling methods that require a specific type.
Downcasting in OOP: Used when working with polymorphism.
===========================================================
What happens if a non-numeric string is converted to an integer using Integer.parseInt()?
A NumberFormatException is thrown.